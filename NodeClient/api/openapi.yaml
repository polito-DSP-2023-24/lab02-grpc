openapi: 3.0.1
info:
  title: Film Manager
  description: REST APIs for the interaction with the Film Manager service.
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3001/
tags:
  - name: api
    description: entry point of the REST interface
  - name: api/films
    description: the set of all the films
  - name: api/films/private
    description: the set of all the private films
  - name: api/films/private/{filmId}
    description: the private film with ID filmId
  - name: api/films/public
    description: the set of all the public films
  - name: api/films/public/invited
    description: the set of the public films for which a review invitation has been issued
  - name: api/films/public/{filmId}
    description: the public film with ID filmId
  - name: api/films/public/{filmId}/reviews
    description: the review invitations (reviews) issued for the public film with ID filmId
  - name: api/films/public/{filmId}/reviews/{reviewerId}
    description: the review issued to the user with ID reviewerId for the public film with ID filmId
  - name: api/films/public/{filmId}/images
    description: the images associated to the public film with ID filmId
  - name: api/films/public/{filmId}/images/{imageId}
    description: the image with ID imageId associated to a public film with ID filmId
  - name: api/films/public/{filmId}/images/{imageId}/imageFile
    description: the file of the image with ID imageId associated to a public film with ID filmId
  - name: api/films/public/assignments
    description: the assignments of review invitations to users
  - name: api/users
    description: the set of all the users
  - name: api/users/authenticator
    description: the authenticator
  - name: api/users/{userId}
    description: the user with ID userId
paths:
  /api:
    get:
      tags:
        - api
      summary: Retrieve the Film Manager
      description: The Film Manager resource, representing the entry point of the REST interface, with ID filmId is retrieved. This operation does not require authentication.
      operationId: getFilmManager
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilmManager'
        '500':
          description: Internal Server Error
          content: {}
  /api/films:
    post:
      tags:
        - api/films
      security:
        - cookieAuth: []
      summary: Create a new film
      description: A new film is created by the authenticated user (who becomes the owner).
      operationId: createFilm
      requestBody:
        description: Representation of the film to be created (with no id because it is assigned by the service)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/private:
    get:
      tags:
        - api/films/private
      security:
        - cookieAuth: []
      summary: Retrieve the private films of the logged-in user
      description: The private films of the logged-in user are retrieved. A pagination mechanism is used to limit the size of messages.
      operationId: getPrivateFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: The id of the requested page (if absent, the first page is returned)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/private/{filmId}:
    get:
      tags:
        - api/films/private/{filmId}
      security:
        - cookieAuth: []
      summary: Retrieve a private film
      description: The private film with ID filmId is retrieved. This operation can be performed on the film if the user who performs the operation is the film's owner.
      operationId: getSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - api/films/private/{filmId}
      security:
        - cookieAuth: []
      summary: Update a private film
      description: The private film with ID filmId is updated. This operation does not allow changing its visibility. This operation can be performed only by the owner.
      operationId: updateSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated film object that needs to replace the old object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '409':
          description: Conflict (attempt to make unallowed change, e.g., visibility)
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - api/films/private/{filmId}
      security:
        - cookieAuth: []
      summary: Delete a private film
      description: The private film with ID filmId is deleted. This operation can only be performed by the owner.
      operationId: deleteSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public:
    get:
      tags:
        - api/films/public
      summary: Retrieve the public films
      description: The public films (i.e., the films that are visible for all the users of the service) are retrieved. This operation does not require authentication. A pagination mechanism is used to limit the size of messages.
      operationId: getPublicFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: The id of the requested page (if absent, the first page is returned)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/invited:
    get:
      tags:
        - api/films/public/invited
      security:
        - cookieAuth: []
      summary: Retrieve the public films that the logged-in user has been invited to review
      description: The public films that the logged-in user has been invited to review are retrieved. A pagination mechanism is used to limit the size of messages.
      operationId: getInvitedFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: The id of the requested page (if absent, the first page is returned)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Films'
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/{filmId}:
    get:
      tags:
        - api/films/public/{filmId}
      summary: Retrieve a public film
      description: The public film with ID filmId is retrieved. This operation does not require authentication.
      operationId: getSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - api/films/public/{filmId}
      security:
        - cookieAuth: []
      summary: Update a public film
      description: The public film with ID filmId is updated. This operation does not allow changing its visibility. This operation can be performed only by the owner.
      operationId: updateSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated film object that needs to replace the old object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '409':
          description: Conflict (attempt to make unallowed change, e.g., visibility)
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - api/films/public/{filmId}
      security:
        - cookieAuth: []
      summary: Delete a public film
      description: The public film with ID filmId is deleted. This operation can only be performed by the owner.
      operationId: deleteSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/{filmId}/reviews:
    post:
      tags:
        - api/films/public/{filmId}/reviews
      security:
        - cookieAuth: []
      summary: Issue film review to some users
      description: The film with ID filmId is assigned to one or more users for review and the corresponding reviews are created. The users are specified in the review representations in the request body. This operation can only be performed by the owner.
      operationId: issueFilmReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: the new film reviews, including the users to whom they are issued
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Review'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '409':
          description: Conflict (e.g., wrong film id or unknown reviewer id)
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    get:
      tags:
        - api/films/public/{filmId}/reviews
      summary: Retrieve the list of all the reviews that have been issued/completed for a public film
      description: 'All the reviews that have been issued/completed for the public film with ID filmId are retrieved. A pagination mechanism is used to limit the size of messages. This operation does not require authentication. '
      operationId: getFilmReviews
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose reviews must be retrieved
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: ID of the requested page (if absent, the first page is returned)'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/{filmId}/reviews/{reviewerId}:
    get:
      tags:
        - api/films/public/{filmId}/reviews/{reviewerId}
      summary: Retrieve a review that has been issued/completed for a film
      description: 'The review of the film with ID filmID issued to the user with ID reviewerId is retrieved. This operation does not require authentication. '
      operationId: getSingleReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose reviews must be retrieved
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the user to whom the review has been issued
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - api/films/public/{filmId}/reviews/{reviewerId}
      security:
        - cookieAuth: []
      summary: Complete a review
      description: The review of the film with ID filmId and issued to the user with ID reviewerId is completed. This operation only allows setting the "completed" property to the "true" value, and changing the values of the "reviewDate", "rating", and "review" properties. This operation can be performed only by the invited reviewer.
      operationId: updateSingleReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose review must be completed
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the user to whom the review has been issued
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated Review object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (the user is not the reviewer)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - api/films/public/{filmId}/reviews/{reviewerId}
      security:
        - cookieAuth: []
      summary: Delete a review invitation
      description: The review of the film with ID filmId and issued to the user with ID reviewerId is deleted. This operation can only be performed by the owner, and only if the review has not yet been completed by the reviewer.
      operationId: deleteSingleReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose review invitation must be deleted
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the user to whom the review has been issued
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden (the user is not the owner)
          content: {}
        '404':
          description: Not Found
          content: {}
        '409':
          description: Conflict (the review has already been completed)
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/assignments:
    post:
      tags:
        - api/films/public/assignments
      security:
        - cookieAuth: []
      summary: Assign automatically review invitations for the unassigned public films owned by the authenticated user in a balanced manner
      description: The films owned by the authenticated user who performed the request and that are not assigned to any user for review, are automatically assigned to the users of the service in a balanced manner. The assignments are returned. Only authenticated users can make this request.
      operationId: assignReviewBalanced
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    filmId:
                      type: integer
                    reviewerId:
                      type: integer
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/users:
    get:
      tags:
        - api/users
      security:
        - cookieAuth: []
      summary: Get information about the users
      description: The available information (passwords excluded) about all the users is retrieved. This operation is available only to authenticated users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
  /api/users/{userId}:
    get:
      tags:
        - api/users/{userId}
      security:
        - cookieAuth: []
      summary: Get information about a user
      description: The available information (password excluded) about the user specified by userId is retrieved. This operation requires authentication.
      operationId: getSingleUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
  /api/users/authenticator:
    post:
      tags:
        - api/users/authenticator
      summary: Logs a user in or out
      description: The user who wants to log in or out sends the user data to the authenticator which performs the operation. For logout, the operation is possible only for authenticated users.
      operationId: authenticateUser
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: The operation type ("login" or "logout")
      requestBody:
        description: The data of the user who wants to perform log in. For login the structure must contain email and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
  /api/films/public/{filmId}/images:
    post:
      tags:
        - api/films/public/{filmId}/images
      security:
        - cookieAuth: []
      summary: Associate a new image to a public film
      description: The image sent in request body is associated to the public film characterized by the ID specified in the path. Only the film owner can associate an image to the film.
      operationId: addImage
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: image to assign to the film
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
            encoding:
              image:
                contentType: image/png, image/jpg, image/gif
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '415':
          description: Unsupported Media Type
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    get:
      tags:
        - api/films/public/{filmId}/images
      summary: Retrieve the list of all the images that have been associated to a public film
      description: All the images that been associated to the public film with ID filmId are retrieved as a json-encoded array of image data structures. Only the film owner or a film reviewer can retrieve the images.
      operationId: getImages
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose images must be retrieved
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Images'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  /api/films/public/{filmId}/images/{imageId}:
    get:
      tags:
        - api/films/public/{filmId}/images/{imageId}
      security:
        - cookieAuth: []
      summary: Retrieve an image associated to a public film
      description: The image with ID imageId, associated to the film with ID filmId, is retrieved. In particular, by specifying the desired content type via the Accept header, the user can decide whether to retrieve the image data structure (json content type), which does not contain the image file, or the image file itself, in one of the supported image content types (image/png, image/jpg, and image/gif). Only the film owner or a film reviewer can perform this operation.
      operationId: getSingleImage
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: imageId
          in: path
          description: ID of the image
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '414':
          description: Unsupported Media Type
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - api/films/public/{filmId}/images/{imageId}
      security:
        - cookieAuth: []
      summary: Delete an image associated to a public film
      description: The image to be deleted is the one with ID imageId, associated to the film with ID filmId. Only the film owner can delete the image.
      operationId: deleteSingleImage
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: imageId
          in: path
          description: ID of the image
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
components:
  schemas:
    FilmManager:
      description: schema for FilmManager data structure (api entry point)
      type: object
      additionalProperties: false
      properties:
        films:
          type: string
          description: URI to access the api/films endpoint
          format: uri
        privateFilms:
          type: string
          description: URI to access the api/films/private endpoint
          format: uri
        publicFilms:
          type: string
          description: URI to access the api/films/public endpoint
          format: uri
        invitedPublicFilms:
          type: string
          format: uri
          description: URI to access the api/films/public/invited endpoint
        reviewAssignments:
          type: string
          description: URI to access the api/films/public/assignments endpoint
          format: uri
        users:
          type: string
          description: URI to access the api/users endpoint
          format: uri
        usersAuthenticator:
          type: string
          description: URI to access the api/users/authenticator endpoint
          format: uri
    User:
      description: schema for User data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure describing the user
        id:
          type: integer
          description: unique identifier for the user
        email:
          type: string
          format: email
          description: user email
        name:
          type: string
          description: username
        password:
          type: string
          minLength: 6
          maxLength: 20
          description: user password
        self:
          type: string
          format: uri
      required:
        - email
    Users:
      description: schema for Users data structures
      type: array
      items:
        $ref: '#/components/schemas/User'
    Film:
      description: schema for Film data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure describing the film
        id:
          type: integer
          description: unique identifier for the film data structure
        title:
          type: string
          description: textual title of the film
        owner:
          type: integer
          description: unique identifier of the the film data structure owner
        private:
          type: boolean
          description: true if only the owner of the film data structure can access it, false otherwise
          default: 'true'
        watchDate:
          type: string
          format: date
          description: the date when the film was watched by the owner
        rating:
          type: integer
          description: the rating the owner has given to the film
          minimum: 1
          maximum: 10
        favorite:
          type: boolean
          description: 'true if the film is among the favourite ones of the owner, false otherwise '
          default: 'false'
        self:
          type: string
          format: uri
        reviews:
          type: string
          format: uri
          description: the reviews for the film
        images:
          type: string
          format: uri
          description: the images associated to the film
      required:
        - title
        - owner
        - private
    Films:
      description: schema for Films data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure describing the films
        totalPages:
          type: integer
          minimum: 0
          description: total number of pages
        currentPage:
          type: integer
          minimum: 0
          description: the page included in this object
        totalItems:
          type: integer
          minimum: 0
          description: the total number of items in the current page
        films:
          type: array
          items:
            $ref: '#/components/schemas/Film'
          description: the films of the current page
        next:
          type: string
          format: uri
      required:
        - totalPages
    Review:
      description: schema for Review data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure describing the film
        filmId:
          type: integer
          description: unique identifier of the film for which a review invitation has been issued
        reviewerId:
          type: integer
          description: unique identifier of the user who has received the review invitation
        completed:
          type: boolean
          description: true if the review has been completed, false otherwise
          default: 'false'
        reviewDate:
          type: string
          format: date
          description: the date when the review has been completed by the invited user
        rating:
          type: integer
          description: the rating the reviewer has given to the film
          minimum: 1
          maximum: 10
        review:
          type: string
          description: a textual description of the review
          maxLength: 1000
        self:
          type: string
          format: uri
      required:
        - filmId
        - reviewerId
    Reviews:
      description: schema for Reviews data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure describing the reviews
        totalPages:
          type: integer
          minimum: 0
          description: total number of pages
        currentPage:
          type: integer
          minimum: 0
          description: the page included in this object
        totalItems:
          type: integer
          minimum: 0
          description: the total number of items in the current page
        films:
          type: array
          items:
            $ref: '#/components/schemas/Review'
          description: the reviews of the current page
        next:
          type: string
          format: uri
      required:
        - totalPages
    Image:
      type: object
      properties:
        $schema:
          type: string
          description: schema for Image data structure
        id:
          type: integer
          description: unique identifier for the image
        name:
          type: string
          description: name without extension of the image
        self:
          type: string
          format: uri-reference
          description: self link
    Images:
      description: schema for Images data structures
      type: array
      items:
        $ref: '#/components/schemas/Image'
      additionalProperties: false
  securitySchemes:
    cookieAuth:
      description: JWT to identify the authenticated user.
      type: apiKey
      in: cookie
      name: connect.sid
